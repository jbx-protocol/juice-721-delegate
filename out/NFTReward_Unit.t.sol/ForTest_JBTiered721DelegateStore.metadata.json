{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "CANT_MINT_MANUALLY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INSUFFICIENT_AMOUNT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INSUFFICIENT_RESERVES",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_PRICE_SORT_ORDER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_TIER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MANUAL_MINTING_NOT_ALLOWED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MAX_TIERS_EXCEEDED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NO_QUANTITY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OUT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PRICING_RESOLVER_CHANGES_LOCKED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RESERVED_RATE_NOT_ALLOWED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_LOCKED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_REMOVED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VOTING_UNITS_NOT_ALLOWED",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nft",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          }
        ],
        "name": "CleanTiers",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "ForTest_dumpTiersList",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier[]",
            "name": "_tiers",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "holder",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tier",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setBalanceOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "ForTest_setFirstOwnerOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setIsTierRemoved",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tier",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setReservesMintedFor",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint80",
                "name": "contributionFloor",
                "type": "uint80"
              },
              {
                "internalType": "uint48",
                "name": "lockedUntil",
                "type": "uint48"
              },
              {
                "internalType": "uint40",
                "name": "remainingQuantity",
                "type": "uint40"
              },
              {
                "internalType": "uint40",
                "name": "initialQuantity",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "votingUnits",
                "type": "uint16"
              },
              {
                "internalType": "uint16",
                "name": "reservedRate",
                "type": "uint16"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              }
            ],
            "internalType": "struct JBStored721Tier",
            "name": "newTier",
            "type": "tuple"
          }
        ],
        "name": "ForTest_setTier",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "baseUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "cleanTiers",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "contractUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "defaultReservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "encodedIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "encodedTierIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "firstOwnerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "flagsOf",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "lockReservedTokenChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockVotingUnitChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockManualMintingChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "pausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JBTiered721Flags",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "isTierRemoved",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "maxTierIdOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "numberOfBurnedFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservedTokensOutstandingFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservesMintedFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "shouldUseBeneficiaryAsDefault",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721TierParams[]",
            "name": "_tiersToAdd",
            "type": "tuple[]"
          }
        ],
        "name": "recordAddTiers",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tierIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_tokenIds",
            "type": "uint256[]"
          }
        ],
        "name": "recordBurn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "lockReservedTokenChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockVotingUnitChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockManualMintingChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "pausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JBTiered721Flags",
            "name": "_flags",
            "type": "tuple"
          }
        ],
        "name": "recordFlags",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          },
          {
            "internalType": "uint16[]",
            "name": "_tierIds",
            "type": "uint16[]"
          },
          {
            "internalType": "bool",
            "name": "_isManualMint",
            "type": "bool"
          }
        ],
        "name": "recordMint",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "recordMintBestAvailableTier",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_count",
            "type": "uint256"
          }
        ],
        "name": "recordMintReservesFor",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_tierIds",
            "type": "uint256[]"
          }
        ],
        "name": "recordRemoveTierIds",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetBaseUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetContractUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_beneficiary",
            "type": "address"
          }
        ],
        "name": "recordSetDefaultReservedTokenBeneficiary",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "recordSetFirstOwnerOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "_resolver",
            "type": "address"
          }
        ],
        "name": "recordSetTokenUriResolver",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "recordTransferForTier",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "_tokenIds",
            "type": "uint256[]"
          }
        ],
        "name": "redemptionWeightOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "reservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "tier",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tierBalanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierIdOfToken",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierOfTokenId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "tierVotingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_startingId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_size",
            "type": "uint256"
          }
        ],
        "name": "tiers",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier[]",
            "name": "_tiers",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "tokenUriResolverOf",
        "outputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalRedemptionWeight",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "supply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          }
        ],
        "name": "votingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "units",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "balanceOf(address,address)": {
          "params": {
            "_nft": "The NFT to get a balance from.",
            "_owner": "The address to check the balance of."
          },
          "returns": {
            "balance": "The number of tokens owners by the owner accross all tiers."
          }
        },
        "cleanTiers(address)": {
          "params": {
            "_nft": "The NFT contract to clean tiers for."
          }
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "params": {
            "_nft": "The NFT contract to which the encoded IPFS URI belongs.",
            "_tokenId": "the ID of the token."
          },
          "returns": {
            "_0": "The encoded IPFS URI."
          }
        },
        "flagsOf(address)": {
          "params": {
            "_nft": "The NFT for which the flags apply."
          },
          "returns": {
            "_0": "The flags."
          }
        },
        "isTierRemoved(address,uint256)": {
          "params": {
            "_nft": "The NFT for which the removed tier is queried",
            "_tierId": "The tier ID"
          },
          "returns": {
            "_0": "True if the tier has been removed"
          }
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a number of reserved tokens outstanding.",
            "_tierId": "The ID of the tier to get a number of reserved tokens outstanding."
          },
          "returns": {
            "_0": "The outstanding number of reserved tokens within the tier."
          }
        },
        "recordAddTiers((uint256,uint256,uint256,uint256,uint256,address,bytes32,bool,bool)[])": {
          "params": {
            "_tiersToAdd": "The tiers to add."
          },
          "returns": {
            "tierIds": "The IDs of the tiers added."
          }
        },
        "recordBurn(uint256[])": {
          "params": {
            "_tokenIds": "The IDs of the tokens burned."
          }
        },
        "recordFlags((bool,bool,bool,bool))": {
          "params": {
            "_flags": "The flag to sets."
          }
        },
        "recordMint(uint256,uint16[],bool)": {
          "params": {
            "_amount": "The amount to base the mints on. All mints' price floors must fit in this amount.",
            "_isManualMint": "A flag indicating if the mint is being made manually by the NFT's owner.",
            "_tierIds": "The IDs of the tier to mint from."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint.",
            "tokenIds": "The IDs of the tokens minted."
          }
        },
        "recordMintBestAvailableTier(uint256)": {
          "params": {
            "_amount": "The amount to base the mint on."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint. ",
            "tierId": "The ID of the tier minted from.",
            "tokenId": "The token ID minted."
          }
        },
        "recordMintReservesFor(uint256,uint256)": {
          "details": "Only a project owner can mint tokens.",
          "params": {
            "_count": "The number of reserved tokens to mint. ",
            "_tierId": "The ID of the tier to mint within."
          },
          "returns": {
            "tokenIds": "The IDs of the tokens being minted as reserves."
          }
        },
        "recordRemoveTierIds(uint256[])": {
          "params": {
            "_tierIds": "The tiers IDs to remove."
          }
        },
        "recordSetBaseUri(string)": {
          "params": {
            "_uri": "The base URI to set."
          }
        },
        "recordSetContractUri(string)": {
          "params": {
            "_uri": "The contract URI to set."
          }
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "params": {
            "_beneficiary": "The reservd token beneficiary."
          }
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "params": {
            "_owner": "The owner to set as the first owner.",
            "_tokenId": "The ID of the token having the first owner set."
          }
        },
        "recordSetTokenUriResolver(address)": {
          "params": {
            "_resolver": "The resolver to set."
          }
        },
        "recordTransferForTier(uint256,address,address)": {
          "params": {
            "_from": "The sender of the token.",
            "_tierId": "The ID the tier being transfered",
            "_to": "The recipient of the token."
          }
        },
        "redemptionWeightOf(address,uint256[])": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated.",
            "_tokenIds": "The IDs of the tokens to get the cumulative redemption weight of."
          },
          "returns": {
            "weight": "The weight."
          }
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "params": {
            "_nft": "The NFT to get the reserved token beneficiary within.",
            "_tierId": "The ID of the tier to get a reserved token beneficiary of."
          },
          "returns": {
            "_0": "The reserved token benficiary."
          }
        },
        "tier(address,uint256)": {
          "params": {
            "_id": "The ID of the tier to get. ",
            "_nft": "The NFT to get a tier within."
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierIdOfToken(uint256)": {
          "details": "Tier's are 1 indexed from the `tiers` array, meaning the 0th element of the array is tier 1.",
          "params": {
            "_tokenId": "The ID of the token to get the tier number of. "
          },
          "returns": {
            "_0": "The tier number of the specified token ID."
          }
        },
        "tierOfTokenId(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a tier within.",
            "_tokenId": "The ID of token to return the tier of. "
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within.",
            "_tierId": "The ID of the tier to get voting units for."
          },
          "returns": {
            "_0": "The voting units for the account."
          }
        },
        "tiers(address,uint256,uint256)": {
          "params": {
            "_nft": "The NFT contract to get tiers for.",
            "_size": "The number of tiers to include.",
            "_startingId": "The start index of the array of tiers sorted by contribution floor. Send 0 to start at the beginning."
          },
          "returns": {
            "_tiers": "All the tiers."
          }
        },
        "totalRedemptionWeight(address)": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated."
          },
          "returns": {
            "weight": "The total weight."
          }
        },
        "totalSupply(address)": {
          "params": {
            "_nft": "The NFT to get a total supply of."
          },
          "returns": {
            "supply": "The total number of NFTs between all tiers."
          }
        },
        "votingUnitsOf(address,address)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within."
          },
          "returns": {
            "units": "The voting units for the account."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "balanceOf(address,address)": {
          "notice": " The total number of tokens owned by the given owner. "
        },
        "baseUriOf(address)": {
          "notice": "The common base for the tokenUri's _nft The NFT for which the base URI applies."
        },
        "cleanTiers(address)": {
          "notice": "Removes removed tiers from sequencing."
        },
        "contractUriOf(address)": {
          "notice": "Contract metadata uri. _nft The NFT for which the contract URI resolver applies."
        },
        "defaultReservedTokenBeneficiaryOf(address)": {
          "notice": "The beneficiary of reserved tokens when the tier doesn't specify a beneficiary. _nft The NFT contract to which the reserved token beneficiary applies."
        },
        "encodedIPFSUriOf(address,uint256)": {
          "notice": "When using this contract to manage token uri's, those are stored as 32bytes, based on IPFS hashes stripped down. _nft The NFT contract to which the encoded upfs uri belongs. _tierId the ID of the tier"
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "notice": "Resolves the encoded tier IPFS URI of the tier for the given token."
        },
        "firstOwnerOf(address,uint256)": {
          "notice": "The first owner of each token ID, stored on first transfer out. _nft The NFT contract to which the token belongs. _tokenId The ID of the token to get the stored first owner of."
        },
        "flagsOf(address)": {
          "notice": "Flags that influence the behavior of each NFT."
        },
        "isTierRemoved(address,uint256)": {
          "notice": "Tier removed from the current tiering"
        },
        "maxTierIdOf(address)": {
          "notice": "The biggest tier ID used. "
        },
        "numberOfBurnedFor(address,uint256)": {
          "notice": " The number of tokens that have been burned for each tier.  _nft The NFT contract to which the burned data belong. _tierId The ID of the tier to get a burned token count for."
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "notice": "The number of reserved tokens that can currently be minted within the tier. "
        },
        "numberOfReservesMintedFor(address,uint256)": {
          "notice": " The number of reserved tokens that have been minted for each tier.  _nft The NFT contract to which the reserve data belong. _tierId The ID of the tier to get a minted reserved token count for."
        },
        "recordAddTiers((uint256,uint256,uint256,uint256,uint256,address,bytes32,bool,bool)[])": {
          "notice": "Adds tiers. "
        },
        "recordBurn(uint256[])": {
          "notice": "Records burned tokens."
        },
        "recordFlags((bool,bool,bool,bool))": {
          "notice": "Sets flags. "
        },
        "recordMint(uint256,uint16[],bool)": {
          "notice": "Mints a token in all provided tiers."
        },
        "recordMintBestAvailableTier(uint256)": {
          "notice": "Mints a token in the best available tier."
        },
        "recordMintReservesFor(uint256,uint256)": {
          "notice": "Mint a token within the tier for the provided value."
        },
        "recordRemoveTierIds(uint256[])": {
          "notice": "Remove tiers. "
        },
        "recordSetBaseUri(string)": {
          "notice": "Sets the base URI. "
        },
        "recordSetContractUri(string)": {
          "notice": "Sets the contract URI. "
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "notice": "Sets the reserved token beneficiary."
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "notice": "Sets the first owner of a token."
        },
        "recordSetTokenUriResolver(address)": {
          "notice": "Sets the token URI resolver. "
        },
        "recordTransferForTier(uint256,address,address)": {
          "notice": "Record a token transfer."
        },
        "redemptionWeightOf(address,uint256[])": {
          "notice": "The cumulative weight the given token IDs have in redemptions compared to the `totalRedemptionWeight`."
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "notice": "The reserved token beneficiary for each tier. "
        },
        "tier(address,uint256)": {
          "notice": "Return the tier for the specified ID. "
        },
        "tierBalanceOf(address,address,uint256)": {
          "notice": "Each account's balance within a specific tier. _nft The NFT contract to which the tier balances belong. _owner The address to get a balance for.  _tierId The ID of the tier to get a balance within."
        },
        "tierIdOfToken(uint256)": {
          "notice": "The tier number of the provided token ID. "
        },
        "tierOfTokenId(address,uint256)": {
          "notice": "Return the tier for the specified token ID. "
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        },
        "tiers(address,uint256,uint256)": {
          "notice": "Gets an array of all the active tiers. "
        },
        "tokenUriResolverOf(address)": {
          "notice": "Custom token URI resolver, superceeds base URI. _nft The NFT for which the token URI resolver applies."
        },
        "totalRedemptionWeight(address)": {
          "notice": "The cumulative weight that all token IDs have in redemptions."
        },
        "totalSupply(address)": {
          "notice": " The total supply of issued NFTs from all tiers."
        },
        "votingUnitsOf(address,address)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/forge-test/NFTReward_Unit.t.sol": "ForTest_JBTiered721DelegateStore"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@jbx-protocol/=node_modules/@jbx-protocol/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@paulrberg/=node_modules/@paulrberg/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":prb-math/=node_modules/prb-math/"
    ]
  },
  "sources": {
    "contracts/JB721GlobalGovernance.sol": {
      "keccak256": "0x70c5a9ea959ed323f9b9f8f93c30b91dd25293a52d7d466de535b5d85a9c9305",
      "license": "MIT",
      "urls": [
        "bzz-raw://cd749a06fc232eff1b526f52784f9aff6e766c09ab97fae4ef35428b6a58fb51",
        "dweb:/ipfs/QmVs7p5GfRseq8otYzkfDKG1moPg3oho4a2V7YQ7MZEmtL"
      ]
    },
    "contracts/JB721TieredGovernance.sol": {
      "keccak256": "0x754af6522e590cb436f14601839c88a3e2ea986275c43333f8d59a67c9391f5b",
      "license": "MIT",
      "urls": [
        "bzz-raw://5b8a5fd45cdc756281159a825bc6d81e100c885fc82ee8fef34c222555726367",
        "dweb:/ipfs/QmeNjiH8ycBqUkYaJ2GC3D2JtCrPVmsd6uYuCk1nTXEbEY"
      ]
    },
    "contracts/JBTiered721Delegate.sol": {
      "keccak256": "0x2f95e7224b203685119dafc00f2cd66e188a587125388dd76a7525f745d2b242",
      "license": "MIT",
      "urls": [
        "bzz-raw://b9aa6b89c2e9770408842d608ee26fd77b2cc8712e0d8d5633503399b88f3cb3",
        "dweb:/ipfs/QmfCd1ARsb5oYrb18vJ2iYQcbeS7UkZGSATWnRhvFDgNyE"
      ]
    },
    "contracts/JBTiered721DelegateDeployer.sol": {
      "keccak256": "0x3757b8a06e0a844540d972020f47c51af97ba3ad4f77491c11a132a72410b4e1",
      "license": "MIT",
      "urls": [
        "bzz-raw://26c327b7834933fc9b00ab612c86d300a421b8fbc74f6b998dbafbd6af2a769a",
        "dweb:/ipfs/QmXfg9EwFcgENcGqUGCQkdaJkp1U1GJc4SRGnENt9FTfsE"
      ]
    },
    "contracts/JBTiered721DelegateStore.sol": {
      "keccak256": "0xdd6f77f253f83fb75dacd976248907ab3090adf61da518e882d89bb6bb458d11",
      "license": "MIT",
      "urls": [
        "bzz-raw://0cccbfc9b6da4eef309dee3adfb1c84b7a6262f43f17537e6bd5f66b3a08b618",
        "dweb:/ipfs/QmPgj9SKqdWtJGGK1g4NPZ3bafrZbxVfiDgBKSgdPt9u88"
      ]
    },
    "contracts/abstract/ERC721.sol": {
      "keccak256": "0x6fa5fc0a84bf4ce7d88a3c9d453025d50a7229a51e81db833850ddaed4aeeaca",
      "license": "MIT",
      "urls": [
        "bzz-raw://be98c8013c3ca95e8bc54496ebd935cd4140f9d5b1224de87a7c32bad92edf07",
        "dweb:/ipfs/QmVoLUK6GLouWuNeVxNAbvbviCdFfLDhjE464SJBhchkJ6"
      ]
    },
    "contracts/abstract/JB721Delegate.sol": {
      "keccak256": "0x171ad0be1c2b9efda8a83304c8b4ca5f8d2f0f96a50c2b037ffca945d87c6534",
      "license": "MIT",
      "urls": [
        "bzz-raw://153a33e5377c364c77c394dcbfbeb81f1df3389b2e23905a2a9887f89e36868f",
        "dweb:/ipfs/QmNuHqF7gthzNMHfXhoa9tX6LV1iRSBRoyQvG7kpyNS9AJ"
      ]
    },
    "contracts/abstract/Votes.sol": {
      "keccak256": "0xe72c4ee47a9c852b93ef5d5a92b7114e97d7098236367eb271ac0bd9e241bd60",
      "license": "MIT",
      "urls": [
        "bzz-raw://fdb3172534d51cc0808d9dc71b878cb245022309c0b23d386dfdb0cfe2814574",
        "dweb:/ipfs/QmNNeRruQoHKgERMBFvtzJytjPEkSWJHwZ2ekJAf4nAA3c"
      ]
    },
    "contracts/enums/JB721GovernanceType.sol": {
      "keccak256": "0x3080b119a8e69d7c98ac4392f436bf9168433feca073e48b2151881543094095",
      "license": "MIT",
      "urls": [
        "bzz-raw://997adf9da18f439c0d86c9ea7be60a7a9363bda800e8c250952bad2410cc0c16",
        "dweb:/ipfs/QmNVQEmC8gtgmTVwZbgycU84xd9wiWWrimHA4ih7QvqXzw"
      ]
    },
    "contracts/forge-test/NFTReward_Unit.t.sol": {
      "keccak256": "0x91f2519892e6907de4580e905a86ddda643a9f80812458a7693685c4020abda3",
      "urls": [
        "bzz-raw://8821d4b65d021896f107b9b2f8d3bfa72ef0aafd73a922c0aa78170063e910b0",
        "dweb:/ipfs/QmQXU7sCunNJifPpAmULju7ukDXoNrF8uh2TE1QqmSwsy6"
      ]
    },
    "contracts/forge-test/utils/AccessJBLib.sol": {
      "keccak256": "0xda36e747df10cd74d3c5b1410423dd2845927bf66bf41251922240d44a729bf6",
      "license": "MIT",
      "urls": [
        "bzz-raw://3ca81dd775a90661f3ef26ced02114388cfab879cdf05787b53cefe3b6d9a778",
        "dweb:/ipfs/QmfSyu1pASER9KzWfF2S83g5ZvUj4A7PhVf2sxZ2q8JBxV"
      ]
    },
    "contracts/interfaces/IJB721Delegate.sol": {
      "keccak256": "0xa8fbb99c63314f21fb37435c4c3beb7b036b1fa423091ecb4908333612598e6f",
      "license": "MIT",
      "urls": [
        "bzz-raw://f06796c0da61e0642eb7d2170e0ddd2ebd97d33c42b8f01ea5dd233882b2fb87",
        "dweb:/ipfs/QmXmfmSScCwpimkyJEB3USwvzfA18zoL4KqkPvE2ZPuP8J"
      ]
    },
    "contracts/interfaces/IJB721TieredGovernance.sol": {
      "keccak256": "0x2919ae0682a56517691009fa632ac5318633a52499314dbbc21e0414703de4f3",
      "license": "MIT",
      "urls": [
        "bzz-raw://e54f0de0dae576a7dd6534f44b532001826b9c571fde51b9606c838bb8c55f05",
        "dweb:/ipfs/QmbXptLGUcXTr7XnMypAoDP6ToMFhjR7vZ7YHJbXhjtaPX"
      ]
    },
    "contracts/interfaces/IJBTiered721Delegate.sol": {
      "keccak256": "0xd514619d1c1bfce3d7f83606e15194e09f61416dc9d51ed6553d408304722d15",
      "license": "MIT",
      "urls": [
        "bzz-raw://9733e6affc80da81c1fe303e8050c66597af545c1091f9e76ae88e9bc06e4beb",
        "dweb:/ipfs/QmRSFGiXAkxpXMmdcfeNgH2piFAiC7jLCjw8cudXsKgToS"
      ]
    },
    "contracts/interfaces/IJBTiered721DelegateDeployer.sol": {
      "keccak256": "0xe739ea2c97a4b3064453da5fd0c7b30e4fa16a642cde36fc3ec3b3b4b8b5f475",
      "license": "MIT",
      "urls": [
        "bzz-raw://ccd168ea152a8a47c4cfee4e95ebcc6bcf4a9d7229a83dff08ebedab3593852d",
        "dweb:/ipfs/QmNkYw1XMs97Mf2Nbs1rmbnpdymhRP62rJ1UB4PQ5CFGRE"
      ]
    },
    "contracts/interfaces/IJBTiered721DelegateStore.sol": {
      "keccak256": "0xcf1b6e7936510e113ecfdf9ec19a53fd4bc76bbdd6fb45277b3f87dad6a80392",
      "license": "MIT",
      "urls": [
        "bzz-raw://3837762449cbb5582dd35cf87857c71fe49d5ee723d4860fc5ff5265415ea57e",
        "dweb:/ipfs/QmbN8ULJmgnfiD8tbKLrKE8KJDzd4xwqopSVq6DWHrMWiT"
      ]
    },
    "contracts/libraries/JBBitmap.sol": {
      "keccak256": "0xc2500935e107a8ffefbb5c0e5905013ac4183cff07f393c5ae5240eab0842769",
      "license": "MIT",
      "urls": [
        "bzz-raw://3f5a556e1f34ef2b6bac262908a6ea253d1f3a21288c57a9aa75c181b7f8b9a8",
        "dweb:/ipfs/QmaVhowy4HpDZ3tkC8EW1dTnKkgrXNAbXUu29tyd6xmX2e"
      ]
    },
    "contracts/libraries/JBIpfsDecoder.sol": {
      "keccak256": "0xe0db553061ceeedd510e024dd9cc50ab19d6a0009519ec169bc6cb5151a372cd",
      "license": "MIT",
      "urls": [
        "bzz-raw://d912a0e0a5b389d688d6938f037076f69ab71eb5c1b69681b472e80ba197aa7b",
        "dweb:/ipfs/QmXUTTYZaSso7nbbUmKhStuuxEuXW2GUEYT1thxREgTN33"
      ]
    },
    "contracts/libraries/JBTiered721FundingCycleMetadataResolver.sol": {
      "keccak256": "0x91b7d5aa4abdc6bace79c4a50ae83416482cb22841bda836ef1dda5c3b050605",
      "license": "MIT",
      "urls": [
        "bzz-raw://b1088586ba3c62cd4a190f8f598aa1456c818cc68bc0b469ad4226bbe4e964b7",
        "dweb:/ipfs/QmbTZePsEoMJdcaAKTqNJguNrVAtpDtVURNMEw4muXKcyi"
      ]
    },
    "contracts/structs/JB721PricingParams.sol": {
      "keccak256": "0x65c6b3a05158713e76ccf22091405b9f7bb023b3e382b2da1babbd6c69961586",
      "license": "MIT",
      "urls": [
        "bzz-raw://fdfbdd554f5a17ede36c57fa7e004548be852f9d840adeb46abc5389d3c4a684",
        "dweb:/ipfs/QmYUA3NuZVLXMtsPpKpuVxn4DAnz55CpxvqmSuREwf8JaU"
      ]
    },
    "contracts/structs/JB721Tier.sol": {
      "keccak256": "0x672025dfabf2c6b0d26f4503365954ff3785e1d5cc8e597a31325d9fd94cd12a",
      "license": "MIT",
      "urls": [
        "bzz-raw://19230b2cbec919ad73b01b408bc7a750d583cecd24363d722ca797d95a127447",
        "dweb:/ipfs/QmdBEcypFDY1UvXPLVUuAEWAknu1GGgxnEYkzem8kssrVq"
      ]
    },
    "contracts/structs/JB721TierParams.sol": {
      "keccak256": "0x99553a129e063389b38ca5c5aafe35bedcf4127bbae846f9c8bbe8a859788867",
      "license": "MIT",
      "urls": [
        "bzz-raw://c5e8c5fc92c18539d38585b610fa57b6a8a3e548379bf68a81e25bb88504c69e",
        "dweb:/ipfs/QmeVzaMnmBdaRPpW3qvF25iD2dmfKqU6LicoTtHDqUcQcH"
      ]
    },
    "contracts/structs/JBBitmapWord.sol": {
      "keccak256": "0x3cb3491c43e48a91763975191edbc4e5b6ea5a2c471ef61a5c002b9c5c51dc96",
      "license": "MIT",
      "urls": [
        "bzz-raw://ed499e21b19251e68aae594fe5e2d9087e3b2fce06d8f39b68271f5c10e871d8",
        "dweb:/ipfs/QmSndiy5j334hys8y3M8ccymkeheJmvQWYCccyU5BVPTQ9"
      ]
    },
    "contracts/structs/JBDeployTiered721DelegateData.sol": {
      "keccak256": "0x748af4b9eb0e5411c74b2cc694a365a19e4b20418883aba0f816953989579498",
      "license": "MIT",
      "urls": [
        "bzz-raw://11fe82016c414b6df04c4eee90cd3e1758e684333d87a9e837fae7032a036ddc",
        "dweb:/ipfs/QmZ8AgMMcz3PMGsxo48wMvotuuUGekGnf5omrXkLpjQ4dx"
      ]
    },
    "contracts/structs/JBStored721Tier.sol": {
      "keccak256": "0x6823b2da240e9f138fd5d2f982e42c3429bb1c3febd3ba413bdd4f9f35ab7a84",
      "license": "MIT",
      "urls": [
        "bzz-raw://9a3b242a39b01f0198b29d823c88450cd2fd22c26936d26accd19913dc096cef",
        "dweb:/ipfs/QmXFn6rJV1fxVxbqStLyySdygenkYVQsGwQhT7EnVhaCYq"
      ]
    },
    "contracts/structs/JBTiered721Flags.sol": {
      "keccak256": "0x244946776da208ef0f433355e11e7c78fc47ff21cc3b176a0cc8234f1d2c9b11",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f0a6ca1eaf2a7616e704c760f57ed5c1b86c26fea61f7680f3341c99de2c5ab",
        "dweb:/ipfs/QmdP1UXG2vuBwW9t1SxvLv8zMB9eqmiPobiYrE6VbSDmK1"
      ]
    },
    "contracts/structs/JBTiered721FundingCycleMetadata.sol": {
      "keccak256": "0x60846dfbd8a229399d5b1bf914e4f61a300a30a7e130c86cb49cdd310d88894b",
      "license": "MIT",
      "urls": [
        "bzz-raw://85269825b9d89d5c32c55b1a06630d679fb973edaedea5402e354c1ecef5373b",
        "dweb:/ipfs/QmUyLbe2Lox2iKfr4sG1RoVuETZZ8xAiXCs4TCaPrVMZEj"
      ]
    },
    "contracts/structs/JBTiered721MintForTiersData.sol": {
      "keccak256": "0x357b55115f542c89e1ccb0338d7b84913018ab00be1582a0e3323dacdb579c42",
      "license": "MIT",
      "urls": [
        "bzz-raw://539586eb3ffeb85ce7a9cbf33fc8c438b34feef2aff1a5e66edcbfaf1210ff4e",
        "dweb:/ipfs/QmaCWYcygXBpg6z7bm8TiA7KXGFvC2Yqkv2i8Eaw2mtYV2"
      ]
    },
    "contracts/structs/JBTiered721MintReservesForTiersData.sol": {
      "keccak256": "0xc04c71a3bbf7daad10971d9507c123e22e5996c4b1497c05deff1c0d6d59b9d0",
      "license": "MIT",
      "urls": [
        "bzz-raw://0e93c80696a98d57053462a156be6f8290ee931666b77f6ff97df4bb2a3b0cc1",
        "dweb:/ipfs/QmZUqXnsaYMz4orNoQ3ybm2So1sHA7qQ46jxu4QRMhFTsq"
      ]
    },
    "contracts/structs/JBTiered721SetTierDelegatesData.sol": {
      "keccak256": "0x9e498d8c9c327d6e19407095e89cdd14d47426edb9f4add595e562a022fa3942",
      "license": "MIT",
      "urls": [
        "bzz-raw://2b6322c0d3671d6ea15eef9fc6fda911cfe6b8d86bee28f2c2f12602574b9d56",
        "dweb:/ipfs/QmaHAWP26DQ4631d9x4jjtRxLNXVcfNEcHpeX67XMGXwX8"
      ]
    },
    "lib/forge-std/lib/ds-test/src/test.sol": {
      "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
      "license": "GPL-3.0-or-later",
      "urls": [
        "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
        "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
      ]
    },
    "lib/forge-std/src/Script.sol": {
      "keccak256": "0x9d09c1e55cd508d3376cff9961625d51d73f8ce075ec1e9deed41408a4556e00",
      "license": "MIT",
      "urls": [
        "bzz-raw://8880c5551daf337ab91665a9ce593df67a9eb11b0bee820f631d324d2fdd3a8b",
        "dweb:/ipfs/QmNpvSBGnS9Jr6Swd6XKsijG59a4yjYemWCFwprjKFkpNC"
      ]
    },
    "lib/forge-std/src/StdJson.sol": {
      "keccak256": "0x1297a1cc393bc8163ccf143e5335536e78cb25ac24a4f6dfdb25f5746dd4827e",
      "license": "MIT",
      "urls": [
        "bzz-raw://945ccffad9fc09d2aa0ac200a80dcfa2f491dba8680fc9c3d3d450d891284b87",
        "dweb:/ipfs/QmYSfFb1L6LN1ZB9KWzZqxt2iAbpuFDskBcU1Bz4RiyuQ5"
      ]
    },
    "lib/forge-std/src/Test.sol": {
      "keccak256": "0x6c9cbd51234372b66bf7c146870edf0855770c46e960a8fae8f354ddf382876b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fd0ff1f449294dd1447b9d483c52d78e137d8cac518646e76df9fdd4d185d6c2",
        "dweb:/ipfs/QmS3JP4vKgvAWo8Tc7zVrGxbdR7t37ayk1mTHN3seD6UAZ"
      ]
    },
    "lib/forge-std/src/Vm.sol": {
      "keccak256": "0x1a5767028a0c3985e991456fc9650055e28b01b787c56b11f66ac30498a153ab",
      "license": "MIT",
      "urls": [
        "bzz-raw://f86887212eacca450a15a8a5bf9fe83fd91a2ba623df8e9c32c75a31824c8ea2",
        "dweb:/ipfs/QmTUHBNdZwntgjbFZne7fY9ZJLNGYWaq3uWfGk6FyqdAkB"
      ]
    },
    "lib/forge-std/src/console.sol": {
      "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
      "license": "MIT",
      "urls": [
        "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
        "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
      ]
    },
    "lib/forge-std/src/console2.sol": {
      "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
      "license": "MIT",
      "urls": [
        "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
        "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/enums/JBBallotState.sol": {
      "keccak256": "0x891fcac63470398b3a11239da7feba6b07d640809fcefd2404303b823d7378f8",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e6adfceaf284b669a8c1cbcf2da7f18ab31a2d1066f9db8bc914349e7401de7",
        "dweb:/ipfs/QmXLHVRPPZdXUkgAHQbHUtEzAvCJk1P6rJ7wrwfTcfW6fw"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol": {
      "keccak256": "0x715321646db00514d1355ed43c40cd3f01e94959552fd07797b315d9c49cdb1d",
      "license": "MIT",
      "urls": [
        "bzz-raw://c34c9e1c727ffc63dd42fb6e6ffb3116c8ba15d6a322a300f10f29478974768d",
        "dweb:/ipfs/QmYToaGrbMyyWAuyepYcDd8M6KcmosY8AWhT3uJmPM6Pvy"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleBallot.sol": {
      "keccak256": "0x49553a56209237846bc400cf27f260824a6bd06fd8094a7eb5abb9de75779598",
      "license": "MIT",
      "urls": [
        "bzz-raw://559372746f94f28b385bc336df263f583dca5377350645c0b28110b083bdb41a",
        "dweb:/ipfs/QmeQRYqPjXBQCtMKXSFtHVD2ewEPoUAPDxLh4oWTRSKbmx"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleDataSource.sol": {
      "keccak256": "0xa424abc146a61b69db83e511c064492da6fab6d8226e13d1580bc9fbc50d6738",
      "license": "MIT",
      "urls": [
        "bzz-raw://59c695ee79b9cd5447b83acb07c92627d747c6e6901e9145671c7ff12602f4c8",
        "dweb:/ipfs/Qma43bK5qkRkcWP9KNwfZ54WuMJsT2TAYfMXkdT1R7vRoK"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleStore.sol": {
      "keccak256": "0xaead823851433be0c2ddc8f8086813e6cd647de3a1bc0f7570a5d6b38c378b5a",
      "license": "MIT",
      "urls": [
        "bzz-raw://7f11fd52ba9ef67b40811d8a2298ae8b69447d2565b3f1069cbb8f0f13bc65e7",
        "dweb:/ipfs/QmVbBzpTxZWar9xvj6x1vW91hJDv2iPVq7aG6waMxaHUPQ"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPayDelegate.sol": {
      "keccak256": "0xa797de18b69eceba117e1f0b3810cf3cc2d2791417d580a5bdc510d1b868ab26",
      "license": "MIT",
      "urls": [
        "bzz-raw://36b214c091c62c54d22cbedb606c29919cb56f1c29acf9c397c948247a29dcc0",
        "dweb:/ipfs/QmSzxHs8xNFqNfxZb1igvPHk7vXA5vUsGQ6AMfJ8jx8Ktu"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPaymentTerminal.sol": {
      "keccak256": "0xb7826f5ed609359ce322c09e83236c47ba385df1c3cad3607e56fd0a2e00eee2",
      "license": "MIT",
      "urls": [
        "bzz-raw://cbb0de0e73f73a04fcfc8f08cab3588b6d608cf5268af737cff6a530f6062c95",
        "dweb:/ipfs/QmPGb8aEbZNHNnrCvuGH52RLvV3kjL3agxQiFrjHoLHaup"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPriceFeed.sol": {
      "keccak256": "0x57c71282fec1b34b00cf991ffed2e36031c393e35bfa7ca5d723eb6572fb7122",
      "license": "MIT",
      "urls": [
        "bzz-raw://f51c97ac194d3120a2fb5428eeeff759b75b7cbc5708465afc914619016a7c9b",
        "dweb:/ipfs/QmemTqsGqoPqG97EsdRTMAbB6RfCz8CJxGYPNnDTV6LJ2t"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPrices.sol": {
      "keccak256": "0x82a175b1f4b95b506c98406576cd59cbe04615e3df24f9cf3587b61b8ee323b1",
      "license": "MIT",
      "urls": [
        "bzz-raw://5493e394cf47fca51a4091f1e6d285cc9e4ff9916e5bdfb8e174fe652a2b9833",
        "dweb:/ipfs/QmTXafZatcjYbNMpUYYk1AWNZLkRFK7VVdAYYudGf4z3HJ"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBProjects.sol": {
      "keccak256": "0x7cfc021d0bd7e73b1ba8f4845d7d35e3419d6a14d3d25ca3a8010e7f91062fe4",
      "license": "MIT",
      "urls": [
        "bzz-raw://ff265e13e60da56b93104260ed69ab01153437ec2af9d453781f22ca295eaef9",
        "dweb:/ipfs/QmfGCSLX2Wy26ojf4U12udsdtjSSacbLcZGwCjTw7MjWF8"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBRedemptionDelegate.sol": {
      "keccak256": "0x172d2c0be65e72e54f71ae521907067f0fa30e8ca05c4f88826903208aa437e2",
      "license": "MIT",
      "urls": [
        "bzz-raw://266a32bd8feea10051a4e243e14692c62e99de7048cda2f541998b4cc64cbd51",
        "dweb:/ipfs/QmPfqsbSZdpQee4WbisK9ZnZRrXbUVvSpbfnrEKGfjzz9N"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBTokenUriResolver.sol": {
      "keccak256": "0xd267fd8ca7c21c2c71794acdb9a98314c33a35fc559e0bf0897a6686d196d174",
      "license": "MIT",
      "urls": [
        "bzz-raw://aa7053d4300ed1374f3f993e6e2163d0a05ee780e4e99eb007b55eabc93c724e",
        "dweb:/ipfs/QmYZAUn7VCwqpDWYZNCXLNYMRQpD334YgPRiGCfxQApzuT"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBConstants.sol": {
      "keccak256": "0x34362846a1cd428a8bdedf4ab6857e11402f345cb87b994b2e7fb6d2474b808d",
      "license": "MIT",
      "urls": [
        "bzz-raw://80b423d29251e6d6cc6bd24b89474628ebcd588fbf485da714134e449e002264",
        "dweb:/ipfs/QmVBKR4eLMfJRHJLxEJJJQiYEgkoXK6kK6HyFy7mQ9Wx6d"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBCurrencies.sol": {
      "keccak256": "0x7e417ff25c173608ee4fe6d9fc3dcd5e1458c78c889af12bac47b1189a436076",
      "license": "MIT",
      "urls": [
        "bzz-raw://92a96ba0dfa74f968db8d5f367c92a8c7e616c70cafab3b6d7f049e43b501e84",
        "dweb:/ipfs/QmdJHS7yVcXjTzN82LjNZp77uzYZPL3951NWit4i36pN7Q"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBFundingCycleMetadataResolver.sol": {
      "keccak256": "0x3d045c38593102cfb6ac67f3ddf2232e1ff5518d6d021423ae2681387599fbd3",
      "license": "MIT",
      "urls": [
        "bzz-raw://a3ed08bbad9868881b87258ecb34b6b5a4fe83e321e5f59c66a758180077135e",
        "dweb:/ipfs/QmbVDpmk4VvunFqpkmsEqX8VomEbsXpRebv841dHRBpy63"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBGlobalFundingCycleMetadataResolver.sol": {
      "keccak256": "0x0d998f938026edeb755987a79421267cf860801161b5f171206a200b60f1061f",
      "license": "MIT",
      "urls": [
        "bzz-raw://d2ff895bbf2f18fe6538abe53966acd8ea128795283209bb8402ac72ddd529b1",
        "dweb:/ipfs/QmZgU8rokY5sBQ2guFmPotGh4e8ReNHAyZzRhZXrN9a8EP"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBTokens.sol": {
      "keccak256": "0xecf82992f7b827766aa55f16872517a646521eef414d8cc9786617ea377e5463",
      "license": "MIT",
      "urls": [
        "bzz-raw://4bb334faa6d2d071473bfcd7efeb5bfa068c340600c204651d59a94be4e4b147",
        "dweb:/ipfs/QmaKgSCvDNgQ6dh2gZfQ9VhkPuRCoACv8e7sd1K9VFikix"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBDidPayData.sol": {
      "keccak256": "0xf3c664309b37790f16047ae97b0459889ae0242dfcde7fc8902c8d10c7f8e6b6",
      "license": "MIT",
      "urls": [
        "bzz-raw://ea74b762604ffa0e45181d8ec31b130198546014f6360d15076af79952bc5874",
        "dweb:/ipfs/QmdukMbucvU75BpK4TsYKoqjpQ2Nhs9yjFVzcKGkG3SpSV"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBDidRedeemData.sol": {
      "keccak256": "0xe2c401f39723a7ce915b8bef328744c66daaf57460843964b941456c2258a412",
      "license": "MIT",
      "urls": [
        "bzz-raw://c3bddd802ff895aa54f047d2385c7c253f9e0cd5b23d4d84439c1590e7e66ccb",
        "dweb:/ipfs/QmXdSDWgEWMtJDqMhHrBCZnBM4qETXRPteB1wEGZBRxuUb"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycle.sol": {
      "keccak256": "0xcdd3ac9b6fa67e62ada88d09b73bc35ade1cd77d43db712289266a788928b4c2",
      "license": "MIT",
      "urls": [
        "bzz-raw://8ba0be407022bbeb0e9272884653209ee262b8a4e00ffbba1298c3b119feccba",
        "dweb:/ipfs/QmbtLQzSN3hut4jYVsYPiYDfRkDdGkZmTWBnV2wJKrdM3K"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleData.sol": {
      "keccak256": "0x2aa6368bf4dfc5797e8b02a978293de0c777fae2658de2c825a103587240f3b0",
      "license": "MIT",
      "urls": [
        "bzz-raw://2d7a980ab9b67ad1569d4407b747903cab668a332214117f5ad44feb50af0a3a",
        "dweb:/ipfs/QmSuEzmrmDSihrTKYCk8miq7VQi7WD6jmQePkjDyzt7UpC"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleMetadata.sol": {
      "keccak256": "0x783604440cac8d176332eab28166f188ee5c230378c08cfc95fea4f7187dc77d",
      "license": "MIT",
      "urls": [
        "bzz-raw://81409f9675aabd5ece88efbf08d1acb5581c2aac5b6394824f575f5f2edb5788",
        "dweb:/ipfs/QmPWdUztAEssCEnuFFkj74kNFEfVUxbNFmD5GmVB2Qvj1h"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBGlobalFundingCycleMetadata.sol": {
      "keccak256": "0x05d85530305fec6d6eca54cdbc2cd9110cbda0146598032b0203aa4b622944ff",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec56eff6784c7b60ebc3098037573d8ece138794a9a58ebe8412e75927e984cd",
        "dweb:/ipfs/QmdkEeE6JDyCiV3YBKf7h3FymEHCAHHAtBokUkJwFWVPSf"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBPayDelegateAllocation.sol": {
      "keccak256": "0xb4e558dc62231d89e9b48998012577d22c3e52b58e23401f22d9096827f6ea0c",
      "license": "MIT",
      "urls": [
        "bzz-raw://b6617a7479709d2a68fbc6686c9087fd7339ffcbb4823010287eb2ad979f23dd",
        "dweb:/ipfs/QmVT66SXpY9h5sD8nJq7VALbfWdeHwUxAeBPymaHg1TMNM"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBPayParamsData.sol": {
      "keccak256": "0x05007b26feb5d9a026b883c6d734a341b5a49ef7b8215fb40507882e2c14e24d",
      "license": "MIT",
      "urls": [
        "bzz-raw://52ef2d3c61f06243aead9afcb043299f362ff9f7b259386a88c4454b429436c0",
        "dweb:/ipfs/QmVpCJ1NyBGBDgNQpmojhjPmqx2gryzopGLgawHE26mwPr"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBProjectMetadata.sol": {
      "keccak256": "0x90ad7b1014c0a9f945fe7a2efde9d5de41e40574fa27969070b1d2ff52033ea0",
      "license": "MIT",
      "urls": [
        "bzz-raw://1fafc65a9fd74605b7d6c6f0a92b3237a8e3efdd160affb8c117bad00dcf9494",
        "dweb:/ipfs/QmQkcVt11WLqrxHVrcDCF6dNxzg2kKHEghAgSbfLF6CHkt"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBRedeemParamsData.sol": {
      "keccak256": "0x5065a824ebb34952f016c6dfa47e8a7ac28427b719470e74a41022c11ace7788",
      "license": "MIT",
      "urls": [
        "bzz-raw://0006b9aeb387a8866d9f619de374d7618159e6a25d562f2c8fca984e2a4b9fea",
        "dweb:/ipfs/QmUfWBMHx6CxN921vM5RktJTP5AYEA3v2xpnMX5LGubhBC"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBRedemptionDelegateAllocation.sol": {
      "keccak256": "0x10c29d33dd0d875a0d4692a2b9a9355c2ebf433cc06a9a60253d4366b60d4d31",
      "license": "MIT",
      "urls": [
        "bzz-raw://76614755cf61b78b3d3263ddcbf7c7146986374e4cdf5cc2abb67c523d957142",
        "dweb:/ipfs/QmVNGDmTCcfYxgbA83yURstmAU7vtAtjTh9zNFRwKMmTH1"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBTokenAmount.sol": {
      "keccak256": "0x4a778e779ba257ba5638c5469e07a4d21b55a3128d56db5a0fdfacb1f3301c51",
      "license": "MIT",
      "urls": [
        "bzz-raw://fdb8302e06c5b4e1e91d204ed735d8d5db5bb3648200c144d7c545678010a44d",
        "dweb:/ipfs/QmTpffbt3FShkk8LDjsonVGnecbbNMUL8QHYQM7AFcMa54"
      ]
    },
    "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "keccak256": "0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0",
      "license": "MIT",
      "urls": [
        "bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86",
        "dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f",
      "license": "MIT",
      "urls": [
        "bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f",
        "dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
        "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
      "license": "MIT",
      "urls": [
        "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
        "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
      "license": "MIT",
      "urls": [
        "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
        "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Checkpoints.sol": {
      "keccak256": "0x2e109f03a05809288a1478d4d9fcd0804229207e18d1164ce0597fb0958a159c",
      "license": "MIT",
      "urls": [
        "bzz-raw://d9495415607fcbd1c940e726f396c46892af8c8772247c002650deacaf5199fb",
        "dweb:/ipfs/QmagLfEk1NCaJEMVDP3ix9BmXy6mccVUMfKAbWQFtjkjvJ"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Counters.sol": {
      "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
      "license": "MIT",
      "urls": [
        "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
        "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
        "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481",
      "license": "MIT",
      "urls": [
        "bzz-raw://73ae8e0c6f975052973265113d762629002ce33987b1933c2a378667e2816f2f",
        "dweb:/ipfs/QmQAootkVfoe4PLaYbT4Xob2dJRm3bZfbCffEHRbCYXNPF"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
      "license": "MIT",
      "urls": [
        "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
        "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0",
      "license": "MIT",
      "urls": [
        "bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929",
        "dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434",
      "license": "MIT",
      "urls": [
        "bzz-raw://cb562d8ae1da31249ca0d8553df9f89ef4c3c110a018c4449dde68ae30e51ec1",
        "dweb:/ipfs/QmUwxjtTUYB89ymeV46TZPmTsGnYrKNcgTHk7MQA1MG3hj"
      ]
    },
    "node_modules/@paulrberg/contracts/math/PRBMath.sol": {
      "keccak256": "0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495",
      "license": "Unlicense",
      "urls": [
        "bzz-raw://92f28eea1e22d4e7998617483eef42d89eb97b364414cf41041c86aa633d3b47",
        "dweb:/ipfs/QmT5entVZFjbb3ZGZZvNAGqtwerCgwjCfN1Qmvf8jKPBXj"
      ]
    },
    "node_modules/prb-math/contracts/PRBMath.sol": {
      "keccak256": "0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61",
      "license": "Unlicense",
      "urls": [
        "bzz-raw://3ba3ad78675323279adfc09038eaa14f4cde3f3173e5d2d60b9c30bf7099aa7b",
        "dweb:/ipfs/QmV56KGJZQG681hwd7JQDv3KjAa9JSGF88ShGx8YBCuvcR"
      ]
    }
  },
  "version": 1
}